<?php
/**
 * Implements hook_perm().
 */
function squeeze_perm() {
  return array(
    "administer squeeze settings",
    "configure node squeeze settings",
    "skip squeeze page",
  );
}

/**
 * Implements hook_menu().
 */
function squeeze_menu() {
  $items = array();
  $items['admin/settings/squeeze'] = array(
    'title' => 'Squeeze',
    'description' => 'Configure global settings for the Squeeze module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('squeeze_admin_settings'),
    'access arguments' => array('administer squeeze settings'),
    'file' => 'squeeze.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_init().
 *
 * This implementation will:
 * - Check if Squeeze has to intercept the current request:
 *   - Anoynmous users only and this is an anonymous user
 *   - Check type of request: node_page_view's and filefield_stats_download's
 *     are candidates for interception
 *   - Are we at the right level (show_page: filefield_stats_download;
 *     !show_page: node_page_view)
 *   - Has a webform been defined for this page (taking into account restriction to specified content types only)
 *   - Check permission to skip Squeeze interception
 * The permission check is been done last as this may call the database. All
 * other checks are fast.
 */
function squeeze_init() {
  // Anonymous users only and this is not an anonymous user?
  if (variable_get('squeeze_settings_anonymous_only', 0) && !user_is_anonymous()) {
    return;
  }

  // node_page_view or filefield_stats_download? and at the correct level?
  $node = NULL;
  $current_menu_item = menu_get_item();
  // @todo: can modules take over router paths? if so, perhaps we'd better check on $current_menu_item['path'] === 'node/%'
  if ($current_menu_item['page_callback'] === 'node_page_view') {
    $node = $current_menu_item['page_arguments'][0];
    $showing_page = TRUE;
  }
  else if ($current_menu_item['page_callback'] === 'filefield_stats_download') {
    $node = $current_menu_item['page_arguments'][1];
    $showing_page = FALSE;
  }
  if ($node === NULL || squeeze_get_show_page($node) == $showing_page) {
    return;
  }

  // Squeeze webform attached?
  if (($squeeze_webform_nid = squeeze_get_webform($node)) == 0) {
    return;
  }

  // Non-anonymous users as well but user does have the 'skip squeeze page' permission
  if (!variable_get('squeeze_settings_anonymous_only', 0) && user_access('skip squeeze page')) {
    return;
  }

  // This is a page request to be intercepted: don't cache it
  $GLOBALS['conf']['cache'] = 0;

  // Has the webform already been filled submitted?
  global $user;
  $sid = 0;
  if ($_SESSION['webform_submissions'][$squeeze_webform_nid] > 0) {
    $sid = $_SESSION['webform_submissions'][$squeeze_webform_nid];
  }
  elseif ($user->uid > 0) {
    $sid = db_result(db_query("SELECT sid FROM {webform_submissions} WHERE nid = %d AND uid = %d",
             $squeeze_webform_nid, $user->uid));
  }

  if (!$sid) {
    $_SESSION['destination'] = $_GET['q'];
    drupal_goto('node/'. $squeeze_webform_nid);
  }
}

/**
 * Implements hook_form_alter().
 *
 * This implementation will alter:
 * - Node edit forms: permissions and settings allowing, a fieldset with the
 *   Squeeze settings will be added to the form.
 * - Webform entry forms: A submit handler will be added so this module can
 *   keep track of submitted webforms.
 */
function squeeze_form_alter(&$form, &$form_state, $form_id) {
  if ($form['#id'] == 'node-form' && squeeze_is_supported_type($form['#node']->type) && user_access("configure node squeeze settings")) {
    $form['squeeze_fieldset'] = array(
      '#type'         => 'fieldset',
      '#title'        => t("Squeeze page settings"),
      '#collapsible'  => 1,
      '#collapsed'    => !squeeze_get_webform($form['#node']),
    );

    $options = array('' => t("None"));
    $node_rows = db_query("SELECT nid, title FROM {node} n WHERE status = 1 AND EXISTS (SELECT * FROM {webform} w WHERE w.nid = n.nid)");
    while ($row = db_fetch_object($node_rows)) {
      $options[$row->nid] = $row->title;
    }
    $form['squeeze_fieldset']['squeeze_form'] = array(
      '#type'         => 'select',
      '#title'        => t("Squeeze form"),
      '#default_value'=> squeeze_get_webform($form['#node']),
      '#options'      => $options,
    );

    $form['squeeze_fieldset']['squeeze_show_page'] = array(
      '#type'         => 'checkbox',
      '#title'        => t("Show page?"),
      '#description'  => t("If you check this, user will be allowed to see the page, but all filefield files will be protected with squeeze form. Filefields should have 'Generic files + Stats URL [+ Download Count]' display type enabled in 'Display fields' tab for this content type."),
      '#default_value'=> squeeze_get_show_page($form['#node']),
    );

    $form['#submit'][] = 'squeeze_form_alter_submit';
  }

  if (strpos($form_id, 'webform_client_form_') === 0) {
    $form['#submit'][] = 'squeeze_webform_save_sid_on_submit';
  }
}

/**
 * Form submit callback for webform submissions.
 *
 * This callback:
 * - Keeps track of webforms submitted by the current visitor.
 * - If Squeeze redirected the visitor to this webform, it will now instruct
 *   Drupal to redirect back to the intercepted page or download.
 */
function squeeze_webform_save_sid_on_submit($form, &$form_state) {
  global $user;

  if ($user->uid == 0) {
    $sid = $form_state['values']['details']['sid'];
    $nid = $form_state['values']['details']['nid'];
    $_SESSION['webform_submissions'][$nid] = $sid;
  }

  if ($_SESSION['destination']) {
    $form_state['redirect'][0] = $_SESSION['destination'];
    $_SESSION['destination'] = FALSE;
  }
}

/**
 * Implements hook_nodeapi().
 */
function squeeze_nodeapi(&$node, $op, $a3, $a4) {
  switch ($op) {
    case 'insert':
    case 'update':
      // Only process if there were Squeeze settings on the form
      if (isset($node->squeeze_form)) {
        if ($node->squeeze_form != variable_get('squeeze_settings_form', 0)) {
          variable_set('squeeze_node_'. $node->nid, $node->squeeze_form);
        }
        else {
          variable_del('squeeze_node_'. $node->nid);
        }
        if ($node->squeeze_show_page != variable_get('squeeze_settings_show_page', 0)) {
          variable_set('squeeze_node_'. $node->nid .'_show_page', $node->squeeze_show_page);
        }
        else {
          variable_del('squeeze_node_'. $node->nid .'_show_page');
        }
      }
      break;
    case 'delete':
      variable_del('squeeze_node_'. $node->nid);
      variable_del('squeeze_node_'. $node->nid .'_show_page');
      break;
  }
}

/**
 * Indicates whether Squeeze is enabled for the given content type.
 *
 * Note that if no enbabled content types are registered, all content types
 * are enabled for Squeeze.
 *
 * @param string $type
 * @return boolean
 */
function squeeze_is_supported_type($type) {
  $supported_types = variable_get('squeeze_settings_content_types', array());
  return empty($supported_types) || in_array($type, $supported_types);
}

/**
 * Helper function to return the webform (nid) for a given nid.
 *
 * This function takes into acount whether the content tpe of the node is a
 * supported content type.
 */
function squeeze_get_webform($node) {
  return squeeze_is_supported_type($node->type) ? variable_get('squeeze_node_' . $node->nid, variable_get('squeeze_settings_form', 0)) : 0;
}

/**
 * Helper function to return the show page setting for a given nid.
 */
function squeeze_get_show_page($node) {
  return variable_get("squeeze_node_{$node->nid}_show_page", variable_get('squeeze_settings_show_page', 0));
}
